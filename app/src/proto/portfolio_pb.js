/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.Bio', null, global);
goog.exportSymbol('proto.proto.Course', null, global);
goog.exportSymbol('proto.proto.Education', null, global);
goog.exportSymbol('proto.proto.Experience', null, global);
goog.exportSymbol('proto.proto.GetBioRequest', null, global);
goog.exportSymbol('proto.proto.GetBioResponse', null, global);
goog.exportSymbol('proto.proto.GetCVRequest', null, global);
goog.exportSymbol('proto.proto.GetCVResponse', null, global);
goog.exportSymbol('proto.proto.Job', null, global);
goog.exportSymbol('proto.proto.ListProjectsRequest', null, global);
goog.exportSymbol('proto.proto.ListProjectsResponse', null, global);
goog.exportSymbol('proto.proto.Project', null, global);
goog.exportSymbol('proto.proto.Projects', null, global);
goog.exportSymbol('proto.proto.Skill', null, global);
goog.exportSymbol('proto.proto.Skills', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Bio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Bio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Bio.displayName = 'proto.proto.Bio';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Bio.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Bio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Bio} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.Bio.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: msg.getTitle(),
    description: msg.getDescription()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Bio}
 */
proto.proto.Bio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Bio;
  return proto.proto.Bio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Bio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Bio}
 */
proto.proto.Bio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.Bio} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Bio.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Bio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Bio.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.Bio} The clone.
 */
proto.proto.Bio.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.Bio} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.proto.Bio.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.proto.Bio.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.proto.Bio.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.proto.Bio.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Course = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Course, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Course.displayName = 'proto.proto.Course';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Course.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Course.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Course} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.Course.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    institution: msg.getInstitution(),
    description: msg.getDescription(),
    dates: msg.getDates(),
    name: msg.getName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Course}
 */
proto.proto.Course.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Course;
  return proto.proto.Course.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Course} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Course}
 */
proto.proto.Course.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstitution(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDates(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.Course} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Course.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Course.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Course.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getInstitution();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDates();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.Course} The clone.
 */
proto.proto.Course.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.Course} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 ID = 1;
 * @return {number}
 */
proto.proto.Course.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.proto.Course.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string institution = 2;
 * @return {string}
 */
proto.proto.Course.prototype.getInstitution = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.proto.Course.prototype.setInstitution = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.proto.Course.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.proto.Course.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string dates = 4;
 * @return {string}
 */
proto.proto.Course.prototype.getDates = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.proto.Course.prototype.setDates = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.proto.Course.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.proto.Course.prototype.setName = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Education = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Education.repeatedFields_, null);
};
goog.inherits(proto.proto.Education, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Education.displayName = 'proto.proto.Education';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Education.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Education.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Education.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Education} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.Education.toObject = function(includeInstance, msg) {
  var f, obj = {
    coursesList: jspb.Message.toObjectList(msg.getCoursesList(),
    proto.proto.Course.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Education}
 */
proto.proto.Education.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Education;
  return proto.proto.Education.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Education} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Education}
 */
proto.proto.Education.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Course;
      reader.readMessage(value,proto.proto.Course.deserializeBinaryFromReader);
      msg.getCoursesList().push(value);
      msg.setCoursesList(msg.getCoursesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.Education} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Education.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Education.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Education.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCoursesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Course.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.Education} The clone.
 */
proto.proto.Education.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.Education} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Course courses = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.proto.Course>}
 */
proto.proto.Education.prototype.getCoursesList = function() {
  return /** @type{!Array.<!proto.proto.Course>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Course, 1));
};


/** @param {Array.<!proto.proto.Course>} value  */
proto.proto.Education.prototype.setCoursesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.proto.Education.prototype.clearCoursesList = function() {
  this.setCoursesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Skill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Skill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Skill.displayName = 'proto.proto.Skill';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Skill.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Skill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Skill} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.Skill.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    name: msg.getName(),
    rating: msg.getRating(),
    description: msg.getDescription()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Skill}
 */
proto.proto.Skill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Skill;
  return proto.proto.Skill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Skill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Skill}
 */
proto.proto.Skill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRating(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.Skill} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Skill.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Skill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Skill.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRating();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.Skill} The clone.
 */
proto.proto.Skill.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.Skill} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 ID = 1;
 * @return {number}
 */
proto.proto.Skill.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.proto.Skill.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.proto.Skill.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.proto.Skill.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 rating = 3;
 * @return {number}
 */
proto.proto.Skill.prototype.getRating = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.proto.Skill.prototype.setRating = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.proto.Skill.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.proto.Skill.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Skills = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Skills.repeatedFields_, null);
};
goog.inherits(proto.proto.Skills, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Skills.displayName = 'proto.proto.Skills';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Skills.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Skills.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Skills.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Skills} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.Skills.toObject = function(includeInstance, msg) {
  var f, obj = {
    skillsList: jspb.Message.toObjectList(msg.getSkillsList(),
    proto.proto.Skill.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Skills}
 */
proto.proto.Skills.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Skills;
  return proto.proto.Skills.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Skills} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Skills}
 */
proto.proto.Skills.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Skill;
      reader.readMessage(value,proto.proto.Skill.deserializeBinaryFromReader);
      msg.getSkillsList().push(value);
      msg.setSkillsList(msg.getSkillsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.Skills} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Skills.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Skills.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Skills.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSkillsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Skill.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.Skills} The clone.
 */
proto.proto.Skills.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.Skills} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Skill skills = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.proto.Skill>}
 */
proto.proto.Skills.prototype.getSkillsList = function() {
  return /** @type{!Array.<!proto.proto.Skill>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Skill, 1));
};


/** @param {Array.<!proto.proto.Skill>} value  */
proto.proto.Skills.prototype.setSkillsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.proto.Skills.prototype.clearSkillsList = function() {
  this.setSkillsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Project = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Project, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Project.displayName = 'proto.proto.Project';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Project.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Project.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Project} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.Project.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    title: msg.getTitle(),
    meta: msg.getMeta(),
    description: msg.getDescription()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Project}
 */
proto.proto.Project.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Project;
  return proto.proto.Project.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Project} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Project}
 */
proto.proto.Project.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeta(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.Project} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Project.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Project.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Project.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getMeta();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.Project} The clone.
 */
proto.proto.Project.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.Project} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 ID = 1;
 * @return {number}
 */
proto.proto.Project.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.proto.Project.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.proto.Project.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.proto.Project.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string meta = 3;
 * @return {string}
 */
proto.proto.Project.prototype.getMeta = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.proto.Project.prototype.setMeta = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.proto.Project.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.proto.Project.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Projects = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Projects.repeatedFields_, null);
};
goog.inherits(proto.proto.Projects, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Projects.displayName = 'proto.proto.Projects';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Projects.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Projects.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Projects.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Projects} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.Projects.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectsList: jspb.Message.toObjectList(msg.getProjectsList(),
    proto.proto.Project.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Projects}
 */
proto.proto.Projects.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Projects;
  return proto.proto.Projects.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Projects} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Projects}
 */
proto.proto.Projects.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Project;
      reader.readMessage(value,proto.proto.Project.deserializeBinaryFromReader);
      msg.getProjectsList().push(value);
      msg.setProjectsList(msg.getProjectsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.Projects} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Projects.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Projects.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Projects.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getProjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Project.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.Projects} The clone.
 */
proto.proto.Projects.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.Projects} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Project projects = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.proto.Project>}
 */
proto.proto.Projects.prototype.getProjectsList = function() {
  return /** @type{!Array.<!proto.proto.Project>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Project, 1));
};


/** @param {Array.<!proto.proto.Project>} value  */
proto.proto.Projects.prototype.setProjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.proto.Projects.prototype.clearProjectsList = function() {
  this.setProjectsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Job = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Job, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Job.displayName = 'proto.proto.Job';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Job.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Job.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Job} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.Job.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    company: msg.getCompany(),
    jobTitle: msg.getJobTitle(),
    location: msg.getLocation(),
    dates: msg.getDates(),
    description: msg.getDescription(),
    logoUrl: msg.getLogoUrl()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Job}
 */
proto.proto.Job.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Job;
  return proto.proto.Job.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Job} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Job}
 */
proto.proto.Job.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDates(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogoUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.Job} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Job.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Job.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Job.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getCompany();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getJobTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getLocation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getDates();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getLogoUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.Job} The clone.
 */
proto.proto.Job.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.Job} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 ID = 1;
 * @return {number}
 */
proto.proto.Job.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.proto.Job.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string company = 2;
 * @return {string}
 */
proto.proto.Job.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.proto.Job.prototype.setCompany = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string job_title = 3;
 * @return {string}
 */
proto.proto.Job.prototype.getJobTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.proto.Job.prototype.setJobTitle = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string location = 4;
 * @return {string}
 */
proto.proto.Job.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.proto.Job.prototype.setLocation = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string dates = 5;
 * @return {string}
 */
proto.proto.Job.prototype.getDates = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.proto.Job.prototype.setDates = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.proto.Job.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.proto.Job.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string logo_url = 7;
 * @return {string}
 */
proto.proto.Job.prototype.getLogoUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.proto.Job.prototype.setLogoUrl = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Experience = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Experience.repeatedFields_, null);
};
goog.inherits(proto.proto.Experience, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Experience.displayName = 'proto.proto.Experience';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Experience.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Experience.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Experience.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Experience} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.Experience.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobsList: jspb.Message.toObjectList(msg.getJobsList(),
    proto.proto.Job.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Experience}
 */
proto.proto.Experience.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Experience;
  return proto.proto.Experience.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Experience} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Experience}
 */
proto.proto.Experience.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Job;
      reader.readMessage(value,proto.proto.Job.deserializeBinaryFromReader);
      msg.getJobsList().push(value);
      msg.setJobsList(msg.getJobsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.Experience} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Experience.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Experience.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Experience.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getJobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Job.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.Experience} The clone.
 */
proto.proto.Experience.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.Experience} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Job jobs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.proto.Job>}
 */
proto.proto.Experience.prototype.getJobsList = function() {
  return /** @type{!Array.<!proto.proto.Job>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Job, 1));
};


/** @param {Array.<!proto.proto.Job>} value  */
proto.proto.Experience.prototype.setJobsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.proto.Experience.prototype.clearJobsList = function() {
  this.setJobsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetBioResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetBioResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.GetBioResponse.displayName = 'proto.proto.GetBioResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetBioResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetBioResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetBioResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.GetBioResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bio: (f = msg.getBio()) && proto.proto.Bio.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetBioResponse}
 */
proto.proto.GetBioResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetBioResponse;
  return proto.proto.GetBioResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetBioResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetBioResponse}
 */
proto.proto.GetBioResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Bio;
      reader.readMessage(value,proto.proto.Bio.deserializeBinaryFromReader);
      msg.setBio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetBioResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.GetBioResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetBioResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.GetBioResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBio();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Bio.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.GetBioResponse} The clone.
 */
proto.proto.GetBioResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.GetBioResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Bio bio = 1;
 * @return {proto.proto.Bio}
 */
proto.proto.GetBioResponse.prototype.getBio = function() {
  return /** @type{proto.proto.Bio} */ (
    jspb.Message.getWrapperField(this, proto.proto.Bio, 1));
};


/** @param {proto.proto.Bio|undefined} value  */
proto.proto.GetBioResponse.prototype.setBio = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.GetBioResponse.prototype.clearBio = function() {
  this.setBio(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.proto.GetBioResponse.prototype.hasBio = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetBioRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetBioRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.GetBioRequest.displayName = 'proto.proto.GetBioRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetBioRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetBioRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetBioRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.GetBioRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetBioRequest}
 */
proto.proto.GetBioRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetBioRequest;
  return proto.proto.GetBioRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetBioRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetBioRequest}
 */
proto.proto.GetBioRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetBioRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.GetBioRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetBioRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.GetBioRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.GetBioRequest} The clone.
 */
proto.proto.GetBioRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.GetBioRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetCVResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetCVResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.GetCVResponse.displayName = 'proto.proto.GetCVResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetCVResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetCVResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetCVResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.GetCVResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    skills: (f = msg.getSkills()) && proto.proto.Skills.toObject(includeInstance, f),
    jobs: (f = msg.getJobs()) && proto.proto.Experience.toObject(includeInstance, f),
    courses: (f = msg.getCourses()) && proto.proto.Education.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetCVResponse}
 */
proto.proto.GetCVResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetCVResponse;
  return proto.proto.GetCVResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetCVResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetCVResponse}
 */
proto.proto.GetCVResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Skills;
      reader.readMessage(value,proto.proto.Skills.deserializeBinaryFromReader);
      msg.setSkills(value);
      break;
    case 2:
      var value = new proto.proto.Experience;
      reader.readMessage(value,proto.proto.Experience.deserializeBinaryFromReader);
      msg.setJobs(value);
      break;
    case 3:
      var value = new proto.proto.Education;
      reader.readMessage(value,proto.proto.Education.deserializeBinaryFromReader);
      msg.setCourses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetCVResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.GetCVResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetCVResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.GetCVResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSkills();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Skills.serializeBinaryToWriter
    );
  }
  f = this.getJobs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.Experience.serializeBinaryToWriter
    );
  }
  f = this.getCourses();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.Education.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.GetCVResponse} The clone.
 */
proto.proto.GetCVResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.GetCVResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Skills skills = 1;
 * @return {proto.proto.Skills}
 */
proto.proto.GetCVResponse.prototype.getSkills = function() {
  return /** @type{proto.proto.Skills} */ (
    jspb.Message.getWrapperField(this, proto.proto.Skills, 1));
};


/** @param {proto.proto.Skills|undefined} value  */
proto.proto.GetCVResponse.prototype.setSkills = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.GetCVResponse.prototype.clearSkills = function() {
  this.setSkills(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.proto.GetCVResponse.prototype.hasSkills = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Experience jobs = 2;
 * @return {proto.proto.Experience}
 */
proto.proto.GetCVResponse.prototype.getJobs = function() {
  return /** @type{proto.proto.Experience} */ (
    jspb.Message.getWrapperField(this, proto.proto.Experience, 2));
};


/** @param {proto.proto.Experience|undefined} value  */
proto.proto.GetCVResponse.prototype.setJobs = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.GetCVResponse.prototype.clearJobs = function() {
  this.setJobs(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.proto.GetCVResponse.prototype.hasJobs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Education courses = 3;
 * @return {proto.proto.Education}
 */
proto.proto.GetCVResponse.prototype.getCourses = function() {
  return /** @type{proto.proto.Education} */ (
    jspb.Message.getWrapperField(this, proto.proto.Education, 3));
};


/** @param {proto.proto.Education|undefined} value  */
proto.proto.GetCVResponse.prototype.setCourses = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.GetCVResponse.prototype.clearCourses = function() {
  this.setCourses(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.proto.GetCVResponse.prototype.hasCourses = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetCVRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetCVRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.GetCVRequest.displayName = 'proto.proto.GetCVRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetCVRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetCVRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetCVRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.GetCVRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetCVRequest}
 */
proto.proto.GetCVRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetCVRequest;
  return proto.proto.GetCVRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetCVRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetCVRequest}
 */
proto.proto.GetCVRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetCVRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.GetCVRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetCVRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.GetCVRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.GetCVRequest} The clone.
 */
proto.proto.GetCVRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.GetCVRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ListProjectsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ListProjectsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ListProjectsResponse.displayName = 'proto.proto.ListProjectsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ListProjectsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ListProjectsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ListProjectsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.ListProjectsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    projects: (f = msg.getProjects()) && proto.proto.Projects.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ListProjectsResponse}
 */
proto.proto.ListProjectsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ListProjectsResponse;
  return proto.proto.ListProjectsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ListProjectsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ListProjectsResponse}
 */
proto.proto.ListProjectsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Projects;
      reader.readMessage(value,proto.proto.Projects.deserializeBinaryFromReader);
      msg.setProjects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.ListProjectsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.ListProjectsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ListProjectsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.ListProjectsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getProjects();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Projects.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.ListProjectsResponse} The clone.
 */
proto.proto.ListProjectsResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.ListProjectsResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Projects projects = 1;
 * @return {proto.proto.Projects}
 */
proto.proto.ListProjectsResponse.prototype.getProjects = function() {
  return /** @type{proto.proto.Projects} */ (
    jspb.Message.getWrapperField(this, proto.proto.Projects, 1));
};


/** @param {proto.proto.Projects|undefined} value  */
proto.proto.ListProjectsResponse.prototype.setProjects = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ListProjectsResponse.prototype.clearProjects = function() {
  this.setProjects(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.proto.ListProjectsResponse.prototype.hasProjects = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ListProjectsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ListProjectsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ListProjectsRequest.displayName = 'proto.proto.ListProjectsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ListProjectsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ListProjectsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ListProjectsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.ListProjectsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ListProjectsRequest}
 */
proto.proto.ListProjectsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ListProjectsRequest;
  return proto.proto.ListProjectsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ListProjectsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ListProjectsRequest}
 */
proto.proto.ListProjectsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.ListProjectsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.ListProjectsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ListProjectsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.ListProjectsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.ListProjectsRequest} The clone.
 */
proto.proto.ListProjectsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.ListProjectsRequest} */ (jspb.Message.cloneMessage(this));
};


goog.object.extend(exports, proto.proto);
