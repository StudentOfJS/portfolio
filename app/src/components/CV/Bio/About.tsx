import * as React from 'react';
import styled from '../../../theme';
import rod from './images/rod.jpg';
import Button, { SelectedBtn } from './Button';

const Avatar = styled.img`
  border-radius: 100%;
  height: 100px;
  width: 100px;
`;

const AboutGrid = styled.div`
  color: darkgrey;
  display: grid;
  justify-content: stretch;
  width: 100vw;
  @media(min-width: 680px){
    grid: 2fr 5fr 2fr / 200px auto;
    height: 100vh;
  }
  @media(max-width: 680px){
    grid: 2fr 5fr / 120px auto;
    height: 100%;
  }
`;

const SidebarAvatar = styled.div`
  align-items: center;
  background-color: darkgray;
  color: white;
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  grid-column: 1 / 2;
  grid-row: 1 / 2;
  height: 100%;
  justify-content: flex-start;
  padding: 40px 0;
  width: 100%;
`;

const SidebarNav = styled.div`
  align-items: center;
  background-color: darkgray;
  color: white;
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  grid-column: 1 / 2;
  grid-row: 2 / 3;
  height: 100%;
  justify-content: flex-start;
  padding: 40px 0;
  width: 100%;
`;

const SidebarFooter = styled.div`
  align-items: center;
  background-color: darkgray;
  color: white;
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  grid-column: 1 / 2;
  grid-row: 3 / 4;
  height: 100%;
  justify-content: flex-start;
  padding: 40px 0;
  width: 100%;
`;

const AboutContent = styled.div`
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  grid-column: 2 / 3;
  grid-row: 1 / 4;
  height: 100%;
  justify-content: center;
  min-height: 320px;
  width: 100%;
`;
const AboutContentBox = styled.div`
  min-width: 300px;
  max-width: 800px;
  @media(min-width: 680px){
    padding: 0;
  }
  @media(max-width: 680px){
    padding: 20px 5px;
  }
`;

const AboutH3 = styled.h3`
  font-family: ${props => props.theme.fontFamily};
  font-size: 40px;
  font-weight: 700;
`;

const AboutH4 = styled.h4`
  font-family: ${props => props.theme.fontFamily};
  font-size: 30px;
`;

const Keywords = styled.div`
  color: #6495ED;
  margin: -10px 0 40px 0;
  ::before {
    content: 'ðŸš€ ';
  };
`;

const Site = () => (
  <AboutContentBox>
    <AboutH3>About this site</AboutH3>
    <Keywords>Go, gRPC, Protocol Buffers, TypeScript, React, Redux, Styled Components</Keywords>
    <AboutH4>background</AboutH4>
    <p>
      I started by hacking Improbable's hackernews clone to reverse engineer what's required to use gRPC for web.
      The goals were simple, learn more about gRPC and figure out how to connect from a server to an app.
      However, at the same time, I was faced with the reality that my neglected portfolio needed some serious love.
      With an impending move back to Australia, I didn't have time for both, so here we are...
    </p>
    <p>
      First step after messing with the hackernews app, was writing a proto file with the services and
      messages I would require and using this as the base for the rest of the project.
      Next time I'll spend longer at this stage. I can't overstate how critical it is to the whole project.
    </p>
    <AboutH4>server</AboutH4>
    <p>
      I chose Go for the server, as it is fast and easy to use.
      Keeping it relatively simple, while leaving scope for future hacking, I added BoltDB and the storm library,
      for easy CRUD operations.
    </p>
    <AboutH4>frontend</AboutH4>
    <p>
      The frontend consists of a React web app with a Redux store connected to gRPC middleware.
      The app is written in TypeScript, which is my preference for React projects,
      but also required to make use of the types generated by protoc.
    </p>
  </AboutContentBox>
);

const Me = () => (
  <AboutContentBox>
    <AboutH3>About Rod Lewis</AboutH3>
    <Keywords>Surfer, Dad, Developer</Keywords>
    <AboutH4>background</AboutH4>
    <p>
      Developer, entrepreneur, technical, I've worn all these hats and more.
      I've worked at several successful startups at key points in their timeline.
      I've ran a SEO business and a
    </p>
    <AboutH4>freetime</AboutH4>
    <p>
      I'm a little obsessed with learning, perhaps forgetting more than I learn, but enjoying the process.
      When I take a break, I like to go to the beach with my wife and son,
      with the hope of sneaking out for a quick surf.
    </p>
  </AboutContentBox>
);

interface AboutState {
  site: boolean;
}

class About extends React.Component<{}, AboutState> {
  public state = {
    site: true,
  };
  public handleClick = () => this.setState(prevProps => ({ site: !prevProps.site }));
  public render() {
    const { site } = this.state;
    return site ? (
      <AboutGrid>
        <SidebarAvatar>
          <Avatar src={rod} alt="Rod's profile picture" />
        </SidebarAvatar>
        <SidebarNav>
          <SelectedBtn disabled={true}>About Site</SelectedBtn>
          <Button onClick={this.handleClick}>About Rod</Button>
        </SidebarNav>
        <SidebarFooter>
          Rod Lewis Â©2018
        </SidebarFooter>
        <AboutContent>
          <Site />
        </AboutContent>
      </AboutGrid >
    ) : (
        <AboutGrid>
          <SidebarAvatar>
            <Avatar src={rod} alt="Rod's profile picture" />
          </SidebarAvatar>
          <SidebarNav>
            <Button onClick={this.handleClick}>About Site</Button>
            <SelectedBtn disabled={true}>About Rod</SelectedBtn>
          </SidebarNav>
          <SidebarFooter>
            Rod Lewis Â©2018
          </SidebarFooter>
          <AboutContent>
            <Me />
          </AboutContent>
        </AboutGrid>
      );
  }
}

export default About;