import * as React from 'react';
import styled from '../../../theme';
import rod from './images/rod.jpg';

const Avatar = styled.img`
  border-radius: 100%;
  height: 100px;
  width: 100px;
`;

const AboutGrid = styled.div`
  color: darkgrey;
  display: grid;
  height: 100vh;
  justify-content: stretch;
  width: 100vw;
  @media(min-width: 680px){
    grid: 2fr 5fr / 200px auto;
  }
  @media(max-width: 680px){
    grid: 2fr 5fr / 120px auto;
  }
`;

const AboutSidebar = styled.div`
  align-items: center;
  background-color: darkgray;
  color: white;
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  grid-column: 1 / 2;
  grid-row: 1 / 3
  height: 100%;
  justify-content: flex-start;
  padding: 40px 0;
  width: 100%;
`;

const AboutContent = styled.div`
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  grid-column: 2 / 3;
  grid-row: 1 / 3;
  height: 100%;
  justify-content: center;
  min-height: 320px;
  width: 100%;
`;
const AboutContentBox = styled.div`
  min-width: 300px;
  max-width: 800px;
  @media(min-width: 680px){
    padding: 0;
  }
  @media(max-width: 680px){
    padding: 20px 5px;
  }
`;

const AboutH3 = styled.h3`
  font-family: ${props => props.theme.fontFamily};
  font-size: 40px;
  font-weight: 700;
`;

const AboutH4 = styled.h4`
  font-family: ${props => props.theme.fontFamily};
  font-size: 30px;
`;

const Keywords = styled.div`
  color: #6495ED;
  margin: -10px 0 40px 0;
  ::before {
    content: 'ðŸš€ ';
  };
`;

const Site = () => (
  <AboutContentBox>
    <AboutH3>About this site</AboutH3>
    <Keywords>Go, gRPC, Protocol Buffers, TypeScript, React, Redux, Styled Components</Keywords>
    <AboutH4>background</AboutH4>
    <p>
      I started my journey of discovery and hacking with
      this site to try and reverse engineer Improbable's hackernews clone.
      The goals were simple, learn more about gRPC and figure out how to connect from a server to an app.
      But like all best laid plans, this evolved and what I have now is a timely replacement for my portfolio.
  </p>
    <p>I started by writing a proto file with the services and
    messages I would require and using this as the base for the rest of the project.</p>
    <p>
      <AboutH4>server</AboutH4>
      I chose Go for the server, as it is performant and because it's my favorite server side language.
      Keeping it relatively simple, while leaving scope for future hacking, I added BoltDB and the storm library,
      for easy CRUD operations.
    </p>
    <AboutH4>frontend</AboutH4>
    <p>
      The frontend consists of a React web app with a Redux store connected to gRPC middleware.
      The app is written in TypeScript, which is my preference for React projects,
      but also required to make use of the types generated by protoc.
    </p>
  </AboutContentBox>
);

interface AboutProps {
}

class About extends React.Component<AboutProps> {
  public state = {};
  public render() {
    return (
      <AboutGrid>
        <AboutSidebar><Avatar src={rod} alt="Rod's profile picture" /></AboutSidebar>
        <AboutContent>
          <Site />
        </AboutContent>
      </AboutGrid>
    );
  }

}

export default About;